"""login_page
This script defines a LoginFrame class using CustomTkinter to create a stylish login interface for a desktop application. It includes input fields for a username and password, and a back button to return to the main menu. When the user clicks the login button, the login() method is called. This method checks that both fields are filled, then connects to a local SQLite database (users.db) to find the stored hashed password for the entered username. If the user exists, it uses bcrypt to compare the entered password with the stored hash. If they match, login is successful and the user is returned to the main menu; otherwise, an appropriate error message is shown. This design ensures secure authentication with feedback and a smooth user experience.
"""

"""signup_page
This script defines a SignUp class using CustomTkinter to create a modern and user-friendly GUI for new user registration in the system. When the class is initialized, it ensures the users.db database and the users table are set up by calling initialize_database(). The interface includes entry fields for a username, password, password confirmation, a selected security question, and its answer. It also has a back button to return to the main menu and a styled “Sign Up” button to trigger registration.
The sign_up() method handles the registration logic. It first validates that all required fields are filled and checks if the entered passwords match. If valid, it securely hashes both the password and the answer to the security question using bcrypt. It then attempts to insert the new user record into the SQLite database. If the username already exists (due to the unique constraint), it shows an error message. Otherwise, it confirms that the account has been created successfully. This structure ensures both security and usability for user onboarding in the application.
"""

"""about_page
This script defines the create_about_page function to generate an “About Us” page for a GUI application using CustomTkinter. It creates a visually appealing, scrollable frame that presents detailed information about the Suspicious Activity Simulator project.
The main layout is built inside a CTkFrame with a dark background (#2a2a2a) and an increased size for spacious content display. A Canvas and Scrollbar combination allows vertical scrolling for large content. Inside the canvas, a secondary frame (scrollable_frame) holds all the actual content widgets. Scrolling is also enabled via mouse wheel events for smoother interaction.
A large, bold title “About Us!” is displayed at the top left. Below it, a well-structured paragraph explains the project: its purpose, features, and mission. It highlights live feed monitoring, analysis of recorded footage, machine learning-driven threat detection, and ease of use. The mission statement emphasizes making surveillance systems smarter and safer using AI. Contact details are listed at the bottom for support or feedback.
"""

"""home_page
This script sets up the main GUI for the Suspicious Activity Simulator using the CustomTkinter framework. It begins by configuring a dark-themed application window titled "Suspicious Activity Simulator" with a clean 800x600 layout. The interface includes a top navigation bar, a dynamic content area that switches between the home page and the “About Us” page, and a welcoming title section. Two primary buttons are placed on the home screen: one for launching the live feed (real-time detection via webcam), and another for selecting and analyzing pre-recorded video files.
The script uses helper functions to load icons and create uniform buttons for a modern and consistent UI. It also includes a menu_item_clicked() function that dynamically switches between pages based on the user's selection (e.g., Home or About Us). The use of tkraise() ensures only the selected frame is visible at any time. This modular and responsive design makes the app easy to navigate and sets the stage for a complete AI-powered surveillance tool with expandable sections like Incidents, Settings, and Help. The application launches with the home screen and remains active using Tkinter’s main event loop.
"""

"""main_page
This script defines the main launcher window for the Suspicious Activity Simulator using CustomTkinter. It creates a custom-styled main window without the default OS window frame, replacing it with a manually built title bar that includes minimize and close buttons. The title bar is also draggable, thanks to event bindings that handle mouse click-and-drag functionality.
The interface features a central welcome screen with a large title and two prominent buttons: Login and Signup. Clicking either button switches the view to the corresponding frame (LoginFrame or SignUp), hiding the main menu temporarily. Each frame (login and signup) is only created once and hidden or shown dynamically, improving efficiency and user experience. A show_main() method allows users to return to the main menu from the login or signup screen.
The minimize_window() and close_window() functions provide custom behavior for minimizing or closing the app. At the bottom, the script checks if it is the main module being run and initializes the application with a dark appearance and color theme. Overall, this code serves as the entry point and navigation hub for the application's user authentication system, combining modern UI design with secure, user-friendly interaction.
"""

"""connect
This script defines a BridgePage class using CustomTkinter, which serves as a transitional interface—essentially a confirmation or access validation screen—before navigating to the actual Home Page of the application.
When initialized, the BridgePage displays a label saying “Validating Access...” along with a “Continue to Home Page” button. The purpose of this screen is likely to give users a quick checkpoint after login or verification, providing a smoother and more intentional transition to the main part of the app.
When the user clicks the continue button, the open_home_page() method is called. This method closes the current BridgePage window (self.master.destroy()) and then calls home_callback(), which is expected to launch the actual home page (imported via start_home_page). This approach is clean and modular, allowing you to separate UI transitions in a user-friendly and organized way.
"""
