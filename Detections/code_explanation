""" alert
This Python script sends a real-time alert message to a Telegram group whenever violence is detected in the surveillance system. It uses the Telegram Bot API, with the bot token retrieved from environment variables (or hardcoded as a fallback) and a specified group chat ID. The send_telegram_alert() function constructs an alert message and sends it to the group using an HTTP POST request via the requests library. If the message is successfully delivered, it confirms the alert in the console; otherwise, it displays an error. This integration ensures that security personnel are instantly notified when suspicious activity is detected by the system.
"""

"""human_detection
This Python script defines a human detection module using TensorFlow and OpenCV, based on the SSD MobileNet V2 model trained on the COCO dataset. The SimpleDetector class loads the frozen TensorFlow graph (.pb model file) and prepares the necessary tensors for detection. It runs inference on input images to detect objects and specifically filters out humans (COCO class ID 1) using a confidence threshold (default 0.5). The draw_boxes() function visualizes the results by drawing bounding boxes and labels around detected people in the image. This module is designed for integration into real-time surveillance systems, enabling automated human detection from video frames.
"""

"""violence_detection
This script performs real-time human and violence detection using a webcam or video feed. It integrates a pretrained human detection model (SSD MobileNet V2) and a custom violence detection model (modelnew.h5). When a person is detected in the frame, the system processes that frame using the violence detection model, which uses a rolling average over predictions to improve stability. If violence is detected with a confidence above a defined threshold, the system sends an alert via Telegram using a cooldown interval to avoid spamming. It also displays bounding boxes and labels (e.g., “Violence Detected”) on the video feed and calculates frames per second (FPS) for performance monitoring. The script uses OpenCV for video capture and display, Keras for deep learning inference, and deque for smoothing predictions. This forms the core engine of the Suspicious Activity Simulator, enabling intelligent, real-time surveillance with automated threat detection and alerting.
"""

"""live_feed
This script enables real-time violence detection through a webcam feed using a combination of TensorFlow, OpenCV, and CustomTkinter, with support for multithreading to ensure a smooth user interface. It begins by loading a pre-trained deep learning model (modelnew.h5) using Keras. The main functionality is provided by the open_camera() function, which starts a separate thread to continuously capture and process frames from the webcam without freezing the GUI. A deque buffer is used to store recent model predictions, allowing for a rolling average to improve the stability and accuracy of detection results.
Within the camera thread, each frame is resized for consistency and passed to the detect_violence() function. This function analyzes the frame using the loaded model and overlays results such as “Violence Detected” directly onto the video feed. The processed frames are then displayed in a window using OpenCV. A user can terminate the feed at any time by pressing the 'q' key, which sets a shared stop_event flag to safely stop the thread and release the webcam resource. The stop_camera() function is provided to allow external control of the live feed (such as from a GUI stop button), giving the application a clean and interactive way to manage surveillance input. This modular design makes the script ideal for integration into a GUI-based security application.
"""

"""select_recordings
This script provides a simple file selection interface using CustomTkinter and tkinter.filedialog. When the open_file() function is called, it opens a dialog box allowing the user to select a video file (such as .mp4, .avi, or .mkv). If a file is selected, the function prints the file path and uses subprocess.Popen() to run a separate Python script (violence_detection.py), passing the selected video file as an argument. This allows the system to perform violence detection on recorded video files in a new process without freezing the GUI.
"""
